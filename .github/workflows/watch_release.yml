name: Watch 7zz Releases and Build Nightly

on:
  schedule:
    - cron: "0 3 * * *"  # Daily at 03:00 UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Get latest 7zz release
      id: get_7zz_version
      run: |
        LATEST_7ZZ=$(curl -s https://api.github.com/repos/ip7z/7zip/releases/latest | jq -r .tag_name)
        echo "version=$LATEST_7ZZ" >> $GITHUB_OUTPUT
        echo "Latest 7zz version: $LATEST_7ZZ"
    
    - name: Get current py7zz version
      id: get_py7zz_version
      run: |
        # Get version from pyproject.toml - handle both old and new formats
        CURRENT_PY7ZZ=$(grep 'version = ' pyproject.toml | cut -d '"' -f 2)
        echo "current=$CURRENT_PY7ZZ" >> $GITHUB_OUTPUT
        echo "Current py7zz version: $CURRENT_PY7ZZ"
        
        # Extract base version for both old format (1.0.0+7zz24.07) and new PEP 440 format
        if [[ $CURRENT_PY7ZZ =~ ^([0-9]+\.[0-9]+\.[0-9]+)\+7zz.* ]]; then
          # Old format: 1.0.0+7zz24.07
          BASE_VERSION="${BASH_REMATCH[1]}"
          echo "Detected old version format: $CURRENT_PY7ZZ"
        elif [[ $CURRENT_PY7ZZ =~ ^([0-9]+\.[0-9]+\.[0-9]+)(a[0-9]+|\.dev[0-9]+)?$ ]]; then
          # New PEP 440 format: 0.1.0.dev25, 1.0.0a1, etc.
          BASE_VERSION="${BASH_REMATCH[1]}"
          echo "Detected new PEP 440 format: $CURRENT_PY7ZZ"
        else
          # Fallback - assume entire version is base version
          BASE_VERSION="$CURRENT_PY7ZZ"
          echo "Unknown version format, using as-is: $CURRENT_PY7ZZ"
        fi
        echo "base=$BASE_VERSION" >> $GITHUB_OUTPUT
        echo "Base version: $BASE_VERSION"
    
    - name: Compare versions and generate nightly version
      id: compare
      run: |
        LATEST_7ZZ="${{ steps.get_7zz_version.outputs.version }}"
        CURRENT_PY7ZZ="${{ steps.get_py7zz_version.outputs.current }}"
        BASE_VERSION="${{ steps.get_py7zz_version.outputs.base }}"
        
        echo "Comparing 7zz $LATEST_7ZZ with py7zz $CURRENT_PY7ZZ"
        echo "Base version: $BASE_VERSION"
        
        # Check if current version uses old format (contains +7zz)
        if [[ $CURRENT_PY7ZZ == *"+7zz"* ]]; then
          echo "Detected old version format - migrating to new PEP 440 format"
          # For old format, we need to upgrade to new PEP 440 format
          # Use base version (e.g., 1.0.0) and create first auto version
          AUTO_VERSION="${BASE_VERSION}a1"
          echo "update_needed=true" >> $GITHUB_OUTPUT
          echo "Migration needed: $CURRENT_PY7ZZ -> $AUTO_VERSION"
        else
          # Check if we need to create a new auto version for new 7zz release
          # For now, we'll check if the latest 7zz version is newer than what we have
          # This is a simplified check - in production, you might want to track 7zz versions in the VERSION_REGISTRY
          
          # Get the current bundled 7zz version from VERSION_REGISTRY if available
          # For now, we'll assume we always need to update if 7zz has a new version
          echo "update_needed=true" >> $GITHUB_OUTPUT
          echo "Update needed - creating auto version for 7zz $LATEST_7ZZ"
          
          # Generate next auto version number
          # Check if current version is already an auto version
          if [[ $CURRENT_PY7ZZ =~ ^([0-9]+\.[0-9]+\.[0-9]+)a([0-9]+)$ ]]; then
            # Current is auto version, increment the alpha number
            NEXT_ALPHA_NUM=$((${BASH_REMATCH[2]} + 1))
            AUTO_VERSION="${BASE_VERSION}a${NEXT_ALPHA_NUM}"
          else
            # Current is stable version, create first auto version
            AUTO_VERSION="${BASE_VERSION}a1"
          fi
        fi
        
        echo "auto_version=$AUTO_VERSION" >> $GITHUB_OUTPUT
        echo "Generated auto version: $AUTO_VERSION"
    
    - name: Update version for auto build
      if: steps.compare.outputs.update_needed == 'true'
      run: |
        AUTO_VERSION="${{ steps.compare.outputs.auto_version }}"
        
        # Update pyproject.toml with auto version
        sed -i "s/version = \".*\"/version = \"$AUTO_VERSION\"/" pyproject.toml
        
        # Verify the change
        echo "Updated version to: $(grep 'version = ' pyproject.toml | cut -d '"' -f 2)"
    
    - name: Trigger auto build
      if: steps.compare.outputs.update_needed == 'true'
      run: |
        # Create a temporary tag for the auto build
        AUTO_VERSION="${{ steps.compare.outputs.auto_version }}"
        LATEST_7ZZ="${{ steps.get_7zz_version.outputs.version }}"
        CURRENT_PY7ZZ="${{ steps.get_py7zz_version.outputs.current }}"
        
        # Commit the version change
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        
        # Different commit message based on migration vs normal update
        if [[ $CURRENT_PY7ZZ == *"+7zz"* ]]; then
          git commit -m "chore: migrate to PEP 440 format and update to 7zz $LATEST_7ZZ (auto build $AUTO_VERSION)"
        else
          git commit -m "chore: auto build for 7zz $LATEST_7ZZ (version $AUTO_VERSION)"
        fi
        
        # Create and push tag to trigger build workflow using PEP 440 format
        AUTO_TAG="v${AUTO_VERSION}"
        git tag "$AUTO_TAG"
        git push origin "$AUTO_TAG"
        
        echo "Created auto tag: $AUTO_TAG"
        echo "Triggered build workflow for version: $AUTO_VERSION"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Release (Auto)
      if: steps.compare.outputs.update_needed == 'true'
      run: |
        AUTO_VERSION="${{ steps.compare.outputs.auto_version }}"
        LATEST_7ZZ="${{ steps.get_7zz_version.outputs.version }}"
        CURRENT_PY7ZZ="${{ steps.get_py7zz_version.outputs.current }}"
        AUTO_TAG="v${AUTO_VERSION}"
        
        # Create release notes based on migration vs normal update
        if [[ $CURRENT_PY7ZZ == *"+7zz"* ]]; then
          RELEASE_TITLE="🟡 Auto Build + PEP 440 Migration: py7zz $AUTO_VERSION"
          RELEASE_NOTES="🟡 **Auto Build - Version Format Migration + 7zz Update**
        
        This is an automated build that migrates from the old version format to PEP 440 compliance and includes the latest 7zz release.
        
        ### Changes
        - **Migrated to PEP 440 format**: From \`$CURRENT_PY7ZZ\` to \`$AUTO_VERSION\`
        - **Updated to 7zz version**: **$LATEST_7ZZ**
        - **py7zz version**: **$AUTO_VERSION**
        
        ### Version Format Changes
        - **Old format**: \`1.0.0+7zz24.07\` (deprecated)
        - **New format**: \`1.0.0a1\` (PEP 440 compliant)
        
        ### Stability
        - **🟡 Basic Stable**: Version format updated, 7zz binary updated, py7zz code unchanged
        - **Recommended for**: Users who need latest 7zz features and PEP 440 compliance
        - **Not recommended for**: Critical production systems (use release version)
        
        ### Installation
        \`\`\`bash
        pip install py7zz==$AUTO_VERSION
        \`\`\`
        
        ### Release Notes
        See the [7zz release notes](https://github.com/ip7z/7zip/releases/tag/$LATEST_7ZZ) for details.
        
        ℹ️ **Note**: This is an auto build with basic stability. For maximum stability, use the official release version."
        else
          RELEASE_TITLE="🟡 Auto Build: py7zz $AUTO_VERSION"
          RELEASE_NOTES="🟡 **Auto Build - 7zz Update**
        
        This is an automated build that includes the latest 7zz release. The py7zz code is unchanged.
        
        ### Changes
        - Updated to 7zz version: **$LATEST_7ZZ**
        - py7zz version: **$AUTO_VERSION**
        
        ### Stability
        - **🟡 Basic Stable**: Only 7zz binary updated, py7zz code unchanged
        - **Recommended for**: Users who need latest 7zz features
        - **Not recommended for**: Critical production systems (use release version)
        
        ### Installation
        \`\`\`bash
        pip install py7zz==$AUTO_VERSION
        \`\`\`
        
        ### Release Notes
        See the [7zz release notes](https://github.com/ip7z/7zip/releases/tag/$LATEST_7ZZ) for details.
        
        ℹ️ **Note**: This is an auto build with basic stability. For maximum stability, use the official release version."
        fi
        
        # Create GitHub release
        gh release create "$AUTO_TAG" \
          --title "$RELEASE_TITLE" \
          --notes "$RELEASE_NOTES" \
          --prerelease
        
        echo "Created auto release: $AUTO_TAG"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Post status to summary
      run: |
        echo "## 7zz Release Check Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest 7zz version**: ${{ steps.get_7zz_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Current py7zz version**: ${{ steps.get_py7zz_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Update needed**: ${{ steps.compare.outputs.update_needed }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.compare.outputs.update_needed }}" == "true" ]]; then
          AUTO_VERSION="${{ steps.compare.outputs.auto_version }}"
          AUTO_TAG="v${AUTO_VERSION}"
          echo "- **Action**: Created auto build $AUTO_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: $AUTO_TAG" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Action**: No update required" >> $GITHUB_STEP_SUMMARY
        fi