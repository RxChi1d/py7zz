name: Build and Publish Wheels

on:
  push:
    tags:
      - 'v*'  # Only trigger on tags starting with 'v'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v0.1.0, v0.1.0a1, v0.2.0.dev1)'
        required: true
        type: string

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .
    
    - name: Run quality checks
      run: |
        uv run ruff check . --output-format=github
        uv run ruff format --check --diff .
        uv run pytest --tb=short
        uv run mypy .

  build:
    needs: quality-check  # Only build after quality check passes
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: 7zz
          - os: macos-14
            platform: macos
            arch: universal
            binary_name: 7zz
          - os: windows-latest
            platform: windows
            arch: x64
            binary_name: 7zz.exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"  # Use latest version for better lock file support
      timeout-minutes: 3  # Add timeout to prevent hanging
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      timeout-minutes: 5  # Add timeout for dependency installation
      run: |
        # Use uv sync for proper dependency management
        uv sync --dev
        uv pip install -e .
    
    - name: Validate tag format and get 7zz version
      id: validate_tag
      shell: bash
      run: |
        # Get tag from push event or workflow dispatch
        if [ "${{ github.event.inputs.tag }}" != "" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
        fi
        
        echo "Git tag: $TAG"
        
        # Validate tag format (PEP 440 compliant)
        if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(\.dev[0-9]+|a[0-9]+)?$ ]]; then
          echo "✓ Tag format is valid: $TAG"
        else
          echo "✗ Invalid tag format: $TAG"
          echo "Expected format: v{major}.{minor}.{patch}[.dev{N}|a{N}]"
          echo "Examples: v1.0.0, v1.0.0a1, v1.0.0.dev1"
          exit 1
        fi
        
        # Get 7zz version (hardcoded for stability)
        SEVEN_ZZ_VERSION="25.00"
        echo "Using 7zz version: $SEVEN_ZZ_VERSION"
        
        # Set outputs
        echo "git_tag=$TAG" >> $GITHUB_OUTPUT
        echo "seven_zz_version=$SEVEN_ZZ_VERSION" >> $GITHUB_OUTPUT
    
    - name: Download 7zz binary
      shell: bash
      run: |
        VERSION="${{ steps.validate_tag.outputs.seven_zz_version }}"
        PLATFORM="${{ matrix.platform }}"
        ARCH="${{ matrix.arch }}"
        BINARY_NAME="${{ matrix.binary_name }}"
        
        # Convert version format (25.00 -> 2500)
        VERSION_FOR_ASSET=$(echo "$VERSION" | sed 's/\.//g')
        echo "Original version: $VERSION"
        echo "Asset version: $VERSION_FOR_ASSET"
        
        # Map platform/arch to 7zz release naming
        case "$PLATFORM-$ARCH" in
          "linux-x64")
            ASSET_NAME="7z${VERSION_FOR_ASSET}-linux-x64.tar.xz"
            ;;
          "macos-universal")
            ASSET_NAME="7z${VERSION_FOR_ASSET}-mac.tar.xz"
            ;;
          "windows-x64")
            ASSET_NAME="7z${VERSION_FOR_ASSET}-x64.exe"
            ;;
          *)
            echo "Unsupported platform: $PLATFORM-$ARCH"
            exit 1
            ;;
        esac
        
        # Download from GitHub releases
        DOWNLOAD_URL="https://github.com/ip7z/7zip/releases/download/${VERSION}/${ASSET_NAME}"
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Clean up all binary directories and create unified directory
        echo "Cleaning up all binary directories and creating unified directory"
        rm -rf "py7zz/bin"
        mkdir -p "py7zz/bin"
        
        if [[ "$PLATFORM" == "windows" ]]; then
          # Windows installer - download and extract CLI components for full format support
          echo "Downloading installer and extracting CLI components..."
          echo "URL: $DOWNLOAD_URL"
          echo "Target path: py7zz/bin/${BINARY_NAME}"
          
          TEMP_DIR=$(mktemp -d)
          curl -L -o "${TEMP_DIR}/${ASSET_NAME}" "$DOWNLOAD_URL"
          
          # GitHub Runner has built-in 7z.exe for extraction
          7z x "${TEMP_DIR}/${ASSET_NAME}" -o"${TEMP_DIR}/out" > /dev/null
          
          # Extract complete CLI with DLL for full format support (7z.exe + 7z.dll)
          if [[ -f "${TEMP_DIR}/out/7z.exe" ]] && [[ -f "${TEMP_DIR}/out/7z.dll" ]]; then
            # Rename 7z.exe to 7zz.exe for cross-platform consistency
            cp "${TEMP_DIR}/out/7z.exe" "py7zz/bin/${BINARY_NAME}"
            cp "${TEMP_DIR}/out/7z.dll" "py7zz/bin/"
            echo "Windows CLI components (7z.exe + 7z.dll) extracted and copied successfully"
          else
            echo "Error: 7z.exe or 7z.dll not found in extracted files"
            echo "Contents of extracted directory:"
            ls -la "${TEMP_DIR}/out/"
            exit 1
          fi
          
          # Clean up temp directory
          rm -rf "${TEMP_DIR}"
        else
          # Unix tar.xz file
          echo "Downloading and extracting Unix binary..."
          echo "URL: $DOWNLOAD_URL"
          echo "Target path: py7zz/bin/${BINARY_NAME}"
          
          TEMP_DIR=$(mktemp -d)
          curl -L -o "${TEMP_DIR}/${ASSET_NAME}" "$DOWNLOAD_URL"
          cd "${TEMP_DIR}"
          tar -xf "${ASSET_NAME}"
          
          # Find and copy the 7zz binary (search only in current extraction directory)
          BINARY_PATH=$(find . -name "7zz" -type f | head -1)
          if [ -n "$BINARY_PATH" ]; then
            cp "$BINARY_PATH" "$GITHUB_WORKSPACE/py7zz/bin/${BINARY_NAME}"
            echo "Binary found and copied: $BINARY_PATH -> py7zz/bin/${BINARY_NAME}"
          else
            echo "Error: 7zz binary not found in extracted files"
            echo "Contents of extracted directory:"
            ls -la .
            exit 1
          fi
          
          # Clean up temp directory
          cd "$GITHUB_WORKSPACE"
          rm -rf "${TEMP_DIR}"
        fi
        
        # Make binary executable (skip for Windows)
        if [[ "$PLATFORM" != "windows" ]]; then
          chmod +x "py7zz/bin/${BINARY_NAME}"
        fi
        
        # Verify the binary was placed correctly
        echo "Verifying binary placement..."
        if [[ -f "py7zz/bin/${BINARY_NAME}" ]]; then
          echo "✓ Binary correctly placed at: py7zz/bin/${BINARY_NAME}"
          ls -la "py7zz/bin/"
        else
          echo "✗ Binary not found at expected location: py7zz/bin/${BINARY_NAME}"
          echo "Contents of py7zz/bin/:"
          find py7zz/bin/ -type f -ls || echo "No files found"
          exit 1
        fi
        
        # Verify binary works
        echo "Verifying binary functionality..."
        BINARY_PATH="py7zz/bin/${BINARY_NAME}"
        
        if [[ "$PLATFORM" == "windows" ]]; then
          # Windows binary verification - verify 7zz.exe (from 7z.exe) with 7z.dll works
          if "$BINARY_PATH" -h > /dev/null 2>&1; then
            echo "✓ Windows binary verification passed - 7zz.exe (from 7z.exe) with full format support"
          else
            echo "✗ Windows binary cannot run properly"
            echo "Binary path: $BINARY_PATH"
            echo "Binary exists: $(test -f "$BINARY_PATH" && echo "yes" || echo "no")"
            echo "DLL exists: $(test -f "py7zz/bin/7z.dll" && echo "yes" || echo "no")"
            echo "Binary size: $(stat -c%s "$BINARY_PATH" 2>/dev/null || stat -f%z "$BINARY_PATH" 2>/dev/null || echo "unknown")"
            exit 1
          fi
        else
          # Unix binary verification
          if "$BINARY_PATH" --help > /dev/null 2>&1; then
            echo "✓ Unix binary verification passed"
          else
            echo "✗ Unix binary verification failed for: $BINARY_PATH"
            exit 1
          fi
        fi
    
    - name: Validate dynamic version generation
      shell: bash
      run: |
        # Test that hatch-vcs can generate version from git tag
        echo "Testing dynamic version generation..."
        
        # Use git describe to get version (no need for hatchling at runtime)
        GENERATED_VERSION=$(git describe --tags --match='v*' | sed 's/^v//')
        
        echo "Generated version: $GENERATED_VERSION"
        
        # Skip validation if version generation failed
        if [ "$GENERATED_VERSION" = "0.0.0" ]; then
          echo "⚠ Version generation failed, skipping validation"
          exit 0
        fi
        
        # Verify version format is PEP 440 compliant
        if [[ $GENERATED_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.dev[0-9]+|a[0-9]+)?$ ]]; then
          echo "✓ Generated version is PEP 440 compliant: $GENERATED_VERSION"
        else
          echo "✗ Generated version is not PEP 440 compliant: $GENERATED_VERSION"
          exit 1
        fi
        
        # Verify version matches git tag (remove 'v' prefix from tag)
        GIT_TAG="${{ steps.validate_tag.outputs.git_tag }}"
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')
        if [ "$GENERATED_VERSION" = "$EXPECTED_VERSION" ]; then
          echo "✓ Generated version matches git tag: $GENERATED_VERSION"
        else
          echo "✗ Version mismatch - Git tag: $GIT_TAG, Generated: $GENERATED_VERSION"
          exit 1
        fi
    
    - name: Build wheel
      shell: bash
      run: |
        # Build platform-specific wheel by renaming after build
        uv build --wheel
        
        # Rename wheel to include platform tag (using PyPI-compatible tags)
        WHEEL_FILE=$(ls dist/*.whl)
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          NEW_NAME=$(echo "$WHEEL_FILE" | sed 's/py3-none-any/py3-none-win_amd64/')
        elif [[ "${{ matrix.platform }}" == "linux" ]]; then
          NEW_NAME=$(echo "$WHEEL_FILE" | sed 's/py3-none-any/py3-none-manylinux1_x86_64/')
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          NEW_NAME=$(echo "$WHEEL_FILE" | sed 's/py3-none-any/py3-none-macosx_10_9_universal2/')
        else
          echo "Unsupported platform: ${{ matrix.platform }}-${{ matrix.arch }}"
          exit 1
        fi
        
        echo "Renaming wheel: $WHEEL_FILE -> $NEW_NAME"
        mv "$WHEEL_FILE" "$NEW_NAME"
    
    - name: Verify wheel version consistency
      shell: bash
      run: |
        # Extract version from built wheel filename
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        WHEEL_VERSION=$(echo "$WHEEL_FILE" | sed -n 's/.*py7zz-\([^-]*\)-.*/\1/p')
        echo "Wheel version: $WHEEL_VERSION"
        
        # Compare with expected version from git tag
        GIT_TAG="${{ steps.validate_tag.outputs.git_tag }}"
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')
        
        if [ "$WHEEL_VERSION" = "$EXPECTED_VERSION" ]; then
          echo "✓ Wheel version matches git tag: $WHEEL_VERSION"
        else
          echo "✗ Wheel version mismatch - Expected: $EXPECTED_VERSION, Got: $WHEEL_VERSION"
          exit 1
        fi
        
        # Test install and version check
        echo "Testing wheel installation and version verification..."
        uv pip install dist/*.whl --force-reinstall
        INSTALLED_VERSION=$(uv run python -c "import py7zz; print(py7zz.get_version())")
        echo "Installed version: $INSTALLED_VERSION"
        
        if [ "$INSTALLED_VERSION" = "$EXPECTED_VERSION" ]; then
          echo "✓ Installed version matches git tag: $INSTALLED_VERSION"
        else
          echo "✗ Installed version mismatch - Expected: $EXPECTED_VERSION, Got: $INSTALLED_VERSION"
          exit 1
        fi
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/*.whl

  publish:
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment: pypi
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: wheels-*
        merge-multiple: true
    
    - name: Final version validation before PyPI publish
      shell: bash
      run: |
        # Get git tag and expected version
        GIT_TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
        EXPECTED_VERSION=$(echo "$GIT_TAG" | sed 's/^v//')
        echo "Git tag: $GIT_TAG"
        echo "Expected PyPI version: $EXPECTED_VERSION"
        
        # Verify all wheels have consistent version
        echo "Verifying wheel versions..."
        for wheel in dist/*.whl; do
          WHEEL_VERSION=$(echo "$wheel" | sed -n 's/.*py7zz-\([^-]*\)-.*/\1/p')
          echo "  $wheel -> $WHEEL_VERSION"
          
          if [ "$WHEEL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "✗ Wheel version mismatch: $wheel"
            echo "  Expected: $EXPECTED_VERSION"
            echo "  Got: $WHEEL_VERSION"
            exit 1
          fi
        done
        
        echo "✓ All wheels have consistent version: $EXPECTED_VERSION"
        
        # Final confirmation
        echo "🚀 Ready to publish to PyPI:"
        echo "  Git tag: $GIT_TAG"
        echo "  PyPI version: $EXPECTED_VERSION"
        echo "  Wheel count: $(ls dist/*.whl | wc -l)"
        ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true
        packages-dir: dist/

  github-release:
    needs: [quality-check, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for changelog
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: wheels-*
        merge-multiple: true
    
    
    - name: Get Release Draft
      id: get_release_draft
      uses: release-drafter/release-drafter@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Only run for stable releases (merged to main)
      if: ${{ !contains(github.ref_name, 'dev') && !contains(github.ref_name, 'a') }}
    
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: "py7zz ${{ github.ref_name }}"
        body: ${{ contains(github.ref_name, 'dev') || contains(github.ref_name, 'a') && 'Development release - see commit history for changes' || steps.get_release_draft.outputs.body }}
        artifacts: "dist/*.whl"
        draft: false
        prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'dev') }}
        generateReleaseNotes: ${{ contains(github.ref_name, 'dev') || contains(github.ref_name, 'a') }}
        allowUpdates: true
        artifactErrorsFailBuild: true
        makeLatest: ${{ !contains(github.ref_name, 'dev') && !contains(github.ref_name, 'a') }}
