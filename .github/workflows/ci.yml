name: CI

on:
  push:
    branches: ["**"]  # All branches
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Run ruff check
      run: uv run ruff check . --output-format=github

    - name: Run ruff format check
      run: uv run ruff format --check --diff .

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Run bandit security scan
      run: uv run bandit -r py7zz/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run safety dependency check
      run: uv run safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Ubuntu: 全面測試所有支援的Python版本
          - os: ubuntu-latest
            python-version: "3.8"
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.13"
          # Windows: 測試關鍵版本（最低和最高支援版本）
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.13"
          # macOS: 測試中間版本作為額外平台驗證
          - os: macos-latest
            python-version: "3.11"
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Download 7zz binary for testing
      run: |
        # Download official 7zz binary (same as build workflow)
        VERSION="25.00"
        VERSION_FOR_ASSET=$(echo "$VERSION" | sed 's/\.//g')  # 25.00 -> 2500
        
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ASSET_NAME="7z${VERSION_FOR_ASSET}-x64.exe"
          BINARY_NAME="7zz.exe"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          ASSET_NAME="7z${VERSION_FOR_ASSET}-mac.tar.xz"
          BINARY_NAME="7zz"
        else
          ASSET_NAME="7z${VERSION_FOR_ASSET}-linux-x64.tar.xz"
          BINARY_NAME="7zz"
        fi
        
        DOWNLOAD_URL="https://github.com/ip7z/7zip/releases/download/${VERSION}/${ASSET_NAME}"
        echo "Downloading 7zz from: $DOWNLOAD_URL"
        
        TEMP_DIR=$(mktemp -d)
        curl -L -o "${TEMP_DIR}/${ASSET_NAME}" "$DOWNLOAD_URL"
        
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # Windows installer - extract CLI components
          7z x "${TEMP_DIR}/${ASSET_NAME}" -o"${TEMP_DIR}/out" > /dev/null
          if [[ -f "${TEMP_DIR}/out/7z.exe" ]] && [[ -f "${TEMP_DIR}/out/7z.dll" ]]; then
            mkdir -p "$HOME/bin"
            cp "${TEMP_DIR}/out/7z.exe" "$HOME/bin/${BINARY_NAME}"
            cp "${TEMP_DIR}/out/7z.dll" "$HOME/bin/"
            echo "$HOME/bin" >> $GITHUB_PATH
            echo "PY7ZZ_BINARY=$HOME/bin/${BINARY_NAME}" >> $GITHUB_ENV
          else
            echo "Error: Windows 7z components not found"
            exit 1
          fi
        else
          # Unix tar.xz file
          cd "${TEMP_DIR}"
          tar -xf "${ASSET_NAME}"
          BINARY_PATH=$(find . -name "7zz" -type f | head -1)
          
          if [ -n "$BINARY_PATH" ]; then
            if [[ "${{ runner.os }}" == "macOS" ]]; then
              cp "$BINARY_PATH" /usr/local/bin/7zz
              echo "PY7ZZ_BINARY=/usr/local/bin/7zz" >> $GITHUB_ENV
            else
              sudo cp "$BINARY_PATH" /usr/local/bin/7zz
              sudo chmod +x /usr/local/bin/7zz
              echo "PY7ZZ_BINARY=/usr/local/bin/7zz" >> $GITHUB_ENV
            fi
          else
            echo "Error: 7zz binary not found in downloaded package"
            exit 1
          fi
        fi
        
        # Verify installation
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          "$HOME/bin/${BINARY_NAME}" -h > /dev/null && echo "7zz verification passed" || exit 1
        else
          /usr/local/bin/7zz --help > /dev/null && echo "7zz verification passed" || exit 1
        fi
        
        # Clean up
        cd "$GITHUB_WORKSPACE"
        rm -rf "${TEMP_DIR}"

    - name: Run pytest with coverage
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.python-version }}" == "3.13" ]]; then
          uv run pytest -v --tb=short --cov=py7zz --cov-report=xml --cov-report=html --cov-report=term-missing
        else
          uv run pytest -v --tb=short
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

    - name: Run mypy
      run: uv run mypy .
