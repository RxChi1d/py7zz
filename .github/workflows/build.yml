name: Build and Publish Wheels

on:
  push:
    tags:
      - 'v*'  # Only trigger on tags starting with 'v'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v0.1.0, v0.1.0-dev.1, v0.1.0-auto)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: 7zz
          - os: macos-14
            platform: macos
            arch: arm64
            binary_name: 7zz
          - os: macos-13
            platform: macos
            arch: x64
            binary_name: 7zz
          - os: windows-latest
            platform: windows
            arch: x64
            binary_name: 7zz.exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .
    
    - name: Parse version from tag
      id: parse_version
      shell: bash
      run: |
        # Get tag from push event or workflow dispatch
        if [ "${{ github.event.inputs.tag }}" != "" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
        fi
        
        echo "Original tag: $TAG"
        
        # Remove 'v' prefix if present
        TAG_NO_V=$(echo $TAG | sed 's/^v//')
        
        # Parse version components using regex
        if [[ $TAG_NO_V =~ ^(.+)-dev\.([0-9]+)(\+7zz(.+))?$ ]]; then
          # Dev version: 0.1.0-dev.1 or 0.1.0-dev.1+7zz24.07
          VERSION_TYPE="dev"
          PY7ZZ_VERSION="${BASH_REMATCH[1]}"
          BUILD_NUMBER="${BASH_REMATCH[2]}"
          SEVEN_ZZ_VERSION="${BASH_REMATCH[4]:-latest}"
          echo "Parsed dev version: py7zz=$PY7ZZ_VERSION, build=$BUILD_NUMBER, 7zz=$SEVEN_ZZ_VERSION"
        elif [[ $TAG_NO_V =~ ^(.+)-auto(\+7zz(.+))?$ ]]; then
          # Auto version: 0.1.0-auto or 0.1.0-auto+7zz24.08
          VERSION_TYPE="auto"
          PY7ZZ_VERSION="${BASH_REMATCH[1]}"
          BUILD_NUMBER=""
          SEVEN_ZZ_VERSION="${BASH_REMATCH[3]:-latest}"
          echo "Parsed auto version: py7zz=$PY7ZZ_VERSION, 7zz=$SEVEN_ZZ_VERSION"
        elif [[ $TAG_NO_V =~ ^([^+]+)(\+7zz(.+))?$ ]]; then
          # Release version: 0.1.0 or 0.1.0+7zz24.07
          VERSION_TYPE="release"
          PY7ZZ_VERSION="${BASH_REMATCH[1]}"
          BUILD_NUMBER=""
          SEVEN_ZZ_VERSION="${BASH_REMATCH[3]:-latest}"
          echo "Parsed release version: py7zz=$PY7ZZ_VERSION, 7zz=$SEVEN_ZZ_VERSION"
        else
          echo "Error: Invalid tag format: $TAG"
          exit 1
        fi
        
        # If 7zz version is "latest", get the latest release
        if [ "$SEVEN_ZZ_VERSION" = "latest" ]; then
          echo "Fetching latest 7zz version..."
          
          # Check available tools
          echo "Available tools:"
          command -v curl && echo "- curl: available" || echo "- curl: not available"
          command -v wget && echo "- wget: available" || echo "- wget: not available"
          command -v jq && echo "- jq: available" || echo "- jq: not available"
          
          # Try different methods to get latest version
          SEVEN_ZZ_VERSION=""
          
          # Method 1: curl + jq
          if command -v curl >/dev/null 2>&1 && command -v jq >/dev/null 2>&1; then
            echo "Trying curl + jq method..."
            LATEST_RESPONSE=$(curl -s https://api.github.com/repos/ip7z/7zip/releases/latest)
            if [ $? -eq 0 ] && [ -n "$LATEST_RESPONSE" ]; then
              SEVEN_ZZ_VERSION=$(echo "$LATEST_RESPONSE" | jq -r '.tag_name' 2>/dev/null)
            fi
          fi
          
          # Method 2: curl + grep (if jq failed)
          if [ -z "$SEVEN_ZZ_VERSION" ] || [ "$SEVEN_ZZ_VERSION" = "null" ]; then
            if command -v curl >/dev/null 2>&1; then
              echo "Trying curl + grep method..."
              SEVEN_ZZ_VERSION=$(curl -s https://api.github.com/repos/ip7z/7zip/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4 2>/dev/null)
            fi
          fi
          
          # Method 3: wget + jq
          if [ -z "$SEVEN_ZZ_VERSION" ] || [ "$SEVEN_ZZ_VERSION" = "null" ]; then
            if command -v wget >/dev/null 2>&1 && command -v jq >/dev/null 2>&1; then
              echo "Trying wget + jq method..."
              LATEST_RESPONSE=$(wget -qO- https://api.github.com/repos/ip7z/7zip/releases/latest 2>/dev/null)
              if [ $? -eq 0 ] && [ -n "$LATEST_RESPONSE" ]; then
                SEVEN_ZZ_VERSION=$(echo "$LATEST_RESPONSE" | jq -r '.tag_name' 2>/dev/null)
              fi
            fi
          fi
          
          # Method 4: wget + grep
          if [ -z "$SEVEN_ZZ_VERSION" ] || [ "$SEVEN_ZZ_VERSION" = "null" ]; then
            if command -v wget >/dev/null 2>&1; then
              echo "Trying wget + grep method..."
              SEVEN_ZZ_VERSION=$(wget -qO- https://api.github.com/repos/ip7z/7zip/releases/latest 2>/dev/null | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4 2>/dev/null)
            fi
          fi
          
          # Fallback to known version
          if [ -z "$SEVEN_ZZ_VERSION" ] || [ "$SEVEN_ZZ_VERSION" = "null" ]; then
            echo "All methods failed, using fallback version"
            SEVEN_ZZ_VERSION="25.00"
          fi
          
          echo "Using 7zz version: $SEVEN_ZZ_VERSION"
        fi
        
        # Set outputs
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        echo "py7zz_version=$PY7ZZ_VERSION" >> $GITHUB_OUTPUT
        echo "seven_zz_version=$SEVEN_ZZ_VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        
        # For compatibility with existing steps
        echo "version=$SEVEN_ZZ_VERSION" >> $GITHUB_OUTPUT
    
    - name: Download 7zz binary
      shell: bash
      run: |
        VERSION="${{ steps.parse_version.outputs.version }}"
        PLATFORM="${{ matrix.platform }}"
        ARCH="${{ matrix.arch }}"
        BINARY_NAME="${{ matrix.binary_name }}"
        
        # Convert version format (25.00 -> 2500)
        VERSION_FOR_ASSET=$(echo "$VERSION" | sed 's/\.//g')
        echo "Original version: $VERSION"
        echo "Asset version: $VERSION_FOR_ASSET"
        
        # Map platform/arch to 7zz release naming
        case "$PLATFORM-$ARCH" in
          "linux-x64")
            ASSET_NAME="7z${VERSION_FOR_ASSET}-linux-x64.tar.xz"
            ;;
          "macos-x64")
            ASSET_NAME="7z${VERSION_FOR_ASSET}-mac.tar.xz"
            ;;
          "macos-arm64")
            ASSET_NAME="7z${VERSION_FOR_ASSET}-mac.tar.xz"
            ;;
          "windows-x64")
            ASSET_NAME="7z${VERSION_FOR_ASSET}-x64.exe"
            ;;
          *)
            echo "Unsupported platform: $PLATFORM-$ARCH"
            exit 1
            ;;
        esac
        
        # Download from GitHub releases
        DOWNLOAD_URL="https://github.com/ip7z/7zip/releases/download/${VERSION}/${ASSET_NAME}"
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Create binary directory
        mkdir -p "py7zz/binaries/${PLATFORM}"
        
        if [[ "$PLATFORM" == "windows" ]]; then
          # Windows .exe file
          curl -L -o "py7zz/binaries/${PLATFORM}/${BINARY_NAME}" "$DOWNLOAD_URL"
        else
          # Unix tar.xz file
          curl -L -o "/tmp/${ASSET_NAME}" "$DOWNLOAD_URL"
          cd /tmp
          tar -xf "${ASSET_NAME}"
          # Find and copy the 7zz binary
          find . -name "7zz" -type f -exec cp {} "$GITHUB_WORKSPACE/py7zz/binaries/${PLATFORM}/${BINARY_NAME}" \;
        fi
        
        # Make binary executable
        chmod +x "py7zz/binaries/${PLATFORM}/${BINARY_NAME}"
        
        # Verify binary works
        "py7zz/binaries/${PLATFORM}/${BINARY_NAME}" --help || echo "Binary verification failed"
    
    - name: Set version environment variables
      shell: bash
      run: |
        echo "PY7ZZ_VERSION=${{ steps.parse_version.outputs.py7zz_version }}" >> $GITHUB_ENV
        echo "SEVEN_ZZ_VERSION=${{ steps.parse_version.outputs.seven_zz_version }}" >> $GITHUB_ENV
        echo "VERSION_TYPE=${{ steps.parse_version.outputs.version_type }}" >> $GITHUB_ENV
        echo "DEV_BUILD_NUMBER=${{ steps.parse_version.outputs.build_number }}" >> $GITHUB_ENV
    
    - name: Build wheel
      run: |
        uv run python -m build --wheel
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/*.whl
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/